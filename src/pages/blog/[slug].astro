---
export const prerender = true;
import Layout from "@/layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { loadQuery } from "@/sanitymonicadisneysite/lib/load-query";
import type { SanityDocument } from "@sanity/client";
import PortableText from "@/components/PortableText.astro";
import FireworksButton from "@/components/FireworksButton.astro";
import { urlForImage } from "@/sanitymonicadisneysite/lib/urlForImage";
import { Schema } from "astro-seo-schema";
import createStarterMetaTags from "@/functions/createStarterMetaTags";
import type { StarterMetaTagProps as InputProps } from "@/functions/createStarterMetaTags";
import type { SEOProps } from "astro-seo";
import { stegaClean } from "@sanity/client/stega";
import PortableTextImage from "@/components/PortableTextImage.astro";

export const getStaticPaths = (async () => {
	const { data: posts } = await loadQuery<SanityDocument[]>({
		query: `*[_type == "post" && (!(_id in path("drafts.**")) && publishedAt != null)]`,
	});

	const routes = posts.map(({ slug }) => ({
		params: {
			slug: slug.current,
		},
	}));

	return routes;
}) satisfies GetStaticPaths;

const { params } = Astro;

const { data: post } = await loadQuery<{ title: string; body: any[]; publishedAt: string; _updatedAt: string; mainImage: any }>({
	query: `*[_type == "post" && slug.current == $slug][0]`,
	params,
});

const imageURL = urlForImage(post.mainImage.asset).width(600).url();

const cleanTitle = stegaClean(post.title);

const objectToPlace: InputProps = {
	title: "Magical Adventures By Monica",
	description: post.title,
	url: Astro.url.href,
	mainSite: Astro.url.origin,
	imageURL: imageURL,
	imageAlt: post.title,
	openGraph: {
		type: "article",
	},
	twitter: {
		card: "summary_large_image",
	},
};

const SEO: ReturnType<typeof createStarterMetaTags> = createStarterMetaTags(objectToPlace);

const extensions: SEOProps = {
	...SEO,
	openGraph: {
		basic: {
			...SEO.openGraph.basic,
		},
		optional: {
			...SEO.openGraph.optional,
		},
		article: {
			publishedTime: stegaClean(post.publishedAt),
			modifiedTime: stegaClean(post._updatedAt),
			authors: ["Monica DeFosse"],
			section: "blog",
		},
	},
	extend: {
		meta: [{ name: "og:logo", content: imageURL + "?w=300" }],
	},
};
---

<Layout userSEOProps={extensions}>
	<Schema
		slot='json-ld'
		item={{
			"@context": "https://schema.org",
			"@type": "NewsArticle",
			headline: post.title,
			image: [imageURL],
			datePublished: post.publishedAt,
			dateModified: post._updatedAt,
			author: [
				{
					"@type": "Person",
					name: "Monica DeFosse",
					url: `${Astro.url.origin}/about-me`,
				},
			],
		}}
	/>
	<h1 class='text-3xl text-center p-4'>{post.title}</h1>
	<PortableTextImage imageInput={{ ...post.mainImage, alignment: "center", headTransitionName: cleanTitle }} class='rounded-3xl p-4 max-w-[50%]' />
	<div class='prose p-4' style={{ maxWidth: "100%" }} transition:name={"main-box" + cleanTitle}>
		<PortableText portableText={post.body} />
	</div>
	<div class='p-4 ps-0'>
		<FireworksButton />
	</div>
	<hr class='my-4' />

	<aside class='font-mono text-xs'>
		<p>
			<b>Last Updated:</b>
			<time datetime={post._updatedAt}
				>{
					new Date(post._updatedAt).toLocaleDateString("default", {
						dateStyle: "long",
					})
				}</time
			>
		</p>
		<p>
			<b>Published:</b>
			<time datetime={post.publishedAt}
				>{
					new Date(post.publishedAt).toLocaleDateString("default", {
						dateStyle: "long",
					})
				}</time
			>
		</p>
	</aside>
</Layout>
